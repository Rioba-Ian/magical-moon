---
import type { HTMLAttributes } from "astro/types";
import { cn } from "../../utils";
import { cva, type VariantProps } from "class-variance-authority";

const anchorVariants = cva("", {
 variants: {
  variant: {
   explore:
    "inline-grid explore uppercase relative font-font-serif z-1  text-dark bg-white px-12 aspect-square rounded-full after:contents-none after:absolute after:w-full after:h-full after:rounded-full after:-z-1 after:bg-white/15",
   primary: "text-white underline ",
   navbar: "uppercase text-xl",
   default: "",
  },
 },
 defaultVariants: {
  variant: "default",
 },
});

interface Props
 extends HTMLAttributes<"a">,
  VariantProps<typeof anchorVariants> {
 asChild?: boolean;
}
const { class: className, asChild = false, variant, ...props } = Astro.props;

const Comp = asChild ? Fragment : "a";
---

<Comp class={cn(anchorVariants({ variant }), className)} {...props}>
 {asChild ? <slot /> : <span>{props.children}</span>}
 <slot />
</Comp>

<style>
 .explore::after {
  opacity: 0;
  transition:
   opacity 500ms linear,
   transform 750ms ease-in-out;
 }

 .explore:hover::after,
 .explore:focus::before {
  opacity: 1;
  transform: scale(1.5);
 }
</style>
